---
title: "Class05: Data visualization"
author: "Gen (PID: A15900230)"
format: pdf
---
# Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package. 

To compare these let's play with the inbuilt `cars` dataset

```{r}
head(cars)
```


To use "base" R I can simply call the `plot()` function:
```{r}
plot(cars)
```

To use `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it:
```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot, I always need at least 3 things: 

- **data** (i.e. what i want to plot)
- **aes** the aesthetic mapping of the data to the plot i want. 
- the **geoms** i.e. How I want to plot the data.
```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + geom_line()
```
If I want to add more stuff, I can just keep adding layers, e.g. 

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + geom_smooth()
```
ggplot is much more verbose than base R plots, but it has a consistent layer system that I can use to make just about any plot. 

let's make a plot with a straight line fit - i.e. a linear model and no standard error shown. 

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) + 
  geom_point() +
  geom_smooth(se=FALSE, method="lm") + 
  labs(title="Speed and Stopping Distances of Cars", x="Speed (MPH)", y="Stopping Distance (ft)", subtitle="From the inbuilt cars dataset", caption="dataset: `cars`") + theme_bw()
```

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)
```
> Q: how many genes are in this dataset?

```{r}
nrow(genes)
```
> Q: How can we summarize that last column - the "state" column?

```{r}
table(genes$State)
```

```{r}
ggplot(genes) + aes(x=Condition1, y=Condition2, color=State) + geom_point() + labs(x="Control", y="Drug Treated")
```

```{r}
p <- ggplot(genes) + aes(x=Condition1, y=Condition2, color=State) + geom_point() 
```

```{r}
p + scale_colour_manual( values=c("blue","gray","red") ) + labs(title= "Gene Expression Changes Upon Drug Treatment", x="Control (no drug)", y="Drug Treatment")
```

## Going further 

Here I read a slightly larger dataset 

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```
```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3) 
```

A very useful layer to add sometimes is for "faceting" 

```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3) + facet_wrap(~continent)
```

