---
title: "Class 13"
author: "Gen Dantay (BIMM 143)"
format: pdf
---

#Patway Analysis with R and Bioconductor

We will use the GAGE package (Generally Applicable Gene set Enrichment), to do KEGG pathway enrichment analysis on RNA-seq based differential expression results. 

# Section 1: Differential Expression Analysis 

We will use DESeq2 from last class!

```{r}
library(DESeq2)

#Count Data and Metadata
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
```

Look at each one:
```{r}
#import metadata and take a peek 
colData = read.csv(metaFile, row.names=1)
head(colData)
```

```{r}
#import countdata 
countData = read.csv (countFile, row.names=1)
head(countData)
```
> Q. Complete the code below to remove the troublesome first column from countData

```{r}
# We need to remove the odd first $length col
countData <- as.matrix(countData[,-1])
head(countData)
```
>Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read counts across all samples (i.e. columns)

Tip: What will rowSums() of countData return and how could you use it in this context?

```{r}
# Filter count data where you have 0 read count across all samples. 
countData= countData[rowSums(countData)>0,]
head(countData)
```
```{r}
nrow(countData)
```
## Running DESeq2


```{r}
dds = DESeqDataSetFromMatrix(countData = countData, 
                             colData = colData, 
                             design=~condition)
dds = DESeq(dds)
```
Result: 
```{r}
dds
```
Create a result variable to hold the results:

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff. 

```{r}
summary(res)
```

## Volcono plot

Here is the visual of the volcono plot:

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

>Q. Improve this plot by completing the code below, which adds color and axis labels

```{r}
# Make a color vector for all the genes 
mycols<- rep("gray", nrow(res))

# Color the genes red with absolute fold change above 2
mycols[abs(res$log2FoldChange)>2]<- "red"

# Color those with the adjusted p-value less than 0.01, blue. The absolute fold change will be more than 2. 
inds <- (res$pvalue<0.01) & (abs(res$log2FoldChange)>2)
mycols[inds] <- "blue"

plot(res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)")
```
## Adding Gene Annotation

>Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID, and GENENAME annotation to our results by completing the code below.


```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals = "first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals = "first")

res$name = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals = "first")

head(res,10)
```

>Q. Finally for this section let's reorder these results by adjusted p-value and save them to a csv file in your current project directory.

```{r}
# Least to greatest:
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

## Section 2. Pathway Analysis 

We will use the GAGE package for pathway analysis and the pathview package to draw pathway diagrams.

The package we will use:

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only 
kegg.sets.hs=kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways 
head(kegg.sets.hs, 3)
```
We used the `mapIDS()` function above to obtain Entrez gene IDs (stored in res$entrez) and we have the fold change results from DESeq2 analysis (stored in res$log2FoldChange)

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```
Results: 
```{r}
keggres=gage(foldchanges, gsets=kegg.sets.hs)
```

What object did `gage()` return?
```{r}
attributes(keggres)
```
Look at the first few down(less) pathway results:
```{r}
head(keggres$less)
```
Use the `pathview()` function to make a pathway plot with our RNA-Seq expression results 
```{r}
library(pathview)
pathview(gene.data = foldchanges,pathway.id = "hsa04110")
```
![](hsa04110.pathview.png)
A different PDF based output of the same data:
```{r}
pathview(gene.data=foldchanges, pathway.id = "hsa04110", kegg.native = FALSE)
```
```{r}
## focus on top 5 upregulated pathways here for demo purposes only
keggrespathways<- rownames(keggres$greater)[1:5]
```
```{r}
# Extract the 8 character long IDs part of each string 
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
Draw plot for all of the top 5 pathways, pass these IDs in keggresids to the pathview() function:

```{r}
pathview(gene.data = foldchanges, pathway.id = keggresids, species="hsa")
```

Here are the pathways:

![](hsa04640.pathview.png)
![](hsa04630.pathview.png)

![](hsa00140.pathview.png)

![](hsa04142.pathview.png)

![](hsa04330.pathview.png)
>Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-regulated pathways?

```{r}
## Focus on top 5 downregulated pathways here
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids

pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```
![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)

## Section 3. Gene Ontology (GO)

Similar procedure with gene ontology.
```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

