---
title: "Class 12: RNAseq Analysis"
author: "Gen Dantay (BIMM 143)"
format: pdf
---

Here we will use the DESeq2 package for RNAseq analysis. The data for today's class come from a study of airway smmoth muscle cells treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects. 

# Import CountData and ColData 

We need two things for this analysis:
- countData (counts for every trancript/gene in each experiment)
- ColData (metadata that describes the experimental system)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names=1)
head(countData)
```
```{r}
metadata <-  read.csv("airway_metadata.csv")
head(metadata)
```
> Q1. How many genes are in this dataset?

```{r}
nrow(countData)
```

There are 38,694 genes in the dataset. 

> Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```
We have 4 'control' cell lines in the data. 
Another way: 
```{r}
sum(metadata$dex == "control")
```

# Toy Differential Gene Expression

First, we will take the mean of just the control variables. Before doing so, we must get all the counts. 
- Step 1. Calculate the mean of the control samples (i.e. columns in countData)
          Calculate the mean of the treated samples. 
          
(a) We need to find which columns are "control" samples. 
    - We need to look in the metadata (a.k.a colData), specifically in the $dex column
```{r}
control.inds <- metadata$dex == "control"
```

```{r}
head(countData[, control.inds])
```
(b) extract all the control columns from `countData` and call it `control.counts`
```{r}
control.counts <- countData[, control.inds]
```

(c) calculate the mean value across the rows of `control.counts` i.e. calcualte the mean count values for each gene in the control samples. 

```{r}
control.means<- rowMeans(control.counts)
head(control.means)
```
- step 2: calculate the mean of the treated side:
> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex == "treated"
head(countData[, treated.inds])
```
```{r}
treated.counts<- countData[, treated.inds]
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts` 
```{r}
meancounts<- data.frame (control.means, treated.means)
head(meancounts)
```
>Q3. How would you make the above code in either approach more robust?

Based on the code from the lab worksheet, we have done it in a more robust and easier way as a class, all above ! 

> Q5(a).  Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```
> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```
We used log transforms for skewed data such as this and because we really care most about relative changes in magnitude.
We must often use log2 as our transform as the math is easier to interpret than log10 or others. 
If we have no change - i.e. same values in control and treated will have a log2 value of zero. 

```{r}
log2(20/20)
```
If I have double the amount i.e. 20 compared to 10 for example, I will have a log2 fold-change of +1
```{r}
log2(20/10)
```
If I have half the amount I will have a log2 fold-change of -1. 
```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

```{r}
meancounts$log2fc<- log2(meancounts$treated.means / meancounts$control.means)
head(meancounts)
```
*did not do Q7...* 
>Q8. How many genes are upregulated at the common threshold of +2. log2FC values?

```{r}
sum(meancounts$log2fc >= 2, na.rm=TRUE)
```
> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(meancounts$log2fc <= 2, na.rm=TRUE)
```


>Q10. Do you trust these results? Why or why not?

No, we do not trust these results, since we do not know and have not gone over the statistics to find out whether or not the changes are statistically significant. 

Hold on, what about the statistics? Yes, these are big changes but are these changes significant?

To do this properly, we will turn to DESeq2 package. 

## DESeq2 analysis 

```{r}
#| message: false
library(DESeq2)
```

To use DESeq2 we need our input countData and colData in a specific format that DESeq2 wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData, 
                       colData = metadata, 
                       design = ~dex)
```
To run the analysis, I can now use the main DESeq2 function called `DESeq()` with `dds` as input 

```{r}
dds <- DESeq(dds)
```
To get the results out of the `dds` object we can use the `results()` function from the package. 

```{r}
res <- results(dds)
head(res)
```

Let's make a final plot of the log2 fold change versus the adjusted p value. 

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low p-values that we care about and these are lost in the skewed plot above. Let's take the log of the $padj values for our plot. 

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2,-2), col="red")
abline(h=-log(0.05), col= "red")

```
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "green" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "lightblue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# cut-off lines
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.1), col="red", lty=2)
```


